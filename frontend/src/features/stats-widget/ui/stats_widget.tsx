'use client'

import { useSubscription } from '@apollo/client'
import { useEffect, useState, useRef } from 'react'
import { STATISTICS_SUBSCRIPTION } from '@/shared/api'
import { StatCard } from '@/entities/stats'
import { DatabaseStats, CalculatedStats } from '@/entities/stats/model/types'
import styles from './styles.module.css'

export function StatsWidget() {
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
  const { data: statsData, loading, error } = useSubscription(STATISTICS_SUBSCRIPTION)
  
  // State –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const [stats, setStats] = useState<CalculatedStats>({
    blocksPerSecond: 0,
    transactionsPerSecond: 0,
    totalBlocks: 0,
    totalTransactions: 0,
    totalAccounts: 0,
    lastUpdated: new Date()
  })
  
  // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∞–Ω–∏–º–∞—Ü–∏–∏
  const [changedFields, setChangedFields] = useState<string[]>([])
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
  const previousStats = useRef<DatabaseStats | null>(null)
  const previousTime = useRef<number>(Date.now())
  
  // –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏
  const lastAnimationTime = useRef<number>(0)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
  const calculateSpeed = (current: DatabaseStats, previous: DatabaseStats | null, currentStats: CalculatedStats): CalculatedStats => {
    const now = Date.now()
    const timeDiff = (now - previousTime.current) / 1000 // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    if (!previous) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ, —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é
      return {
        blocksPerSecond: currentStats.blocksPerSecond,
        transactionsPerSecond: currentStats.transactionsPerSecond,
        totalBlocks: parseInt(current.total_blocks) || 0,
        totalTransactions: parseInt(current.total_transactions) || 0,
        totalAccounts: parseInt(current.total_accounts) || 0,
        lastUpdated: new Date(current.last_updated)
      }
    }

    // –†–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î
    const blocksDiff = parseInt(current.total_blocks) - parseInt(previous.total_blocks)
    const txDiff = parseInt(current.total_transactions) - parseInt(previous.total_transactions)
    
    // üêõ –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üìä –û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏:', {
      current_blocks: current.total_blocks,
      previous_blocks: previous.total_blocks,
      blocksDiff,
      current_tx: current.total_transactions,
      previous_tx: previous.total_transactions,
      txDiff,
      timeDiff,
      currentBPS: currentStats.blocksPerSecond,
      currentTPS: currentStats.transactionsPerSecond
    })

    let blocksPerSecond = currentStats.blocksPerSecond
    let transactionsPerSecond = currentStats.transactionsPerSecond
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (timeDiff >= 0.5) { // –º–∏–Ω–∏–º—É–º 0.5 —Å–µ–∫—É–Ω–¥—ã
      if (blocksDiff > 0) {
        blocksPerSecond = Math.round((blocksDiff / timeDiff) * 100) / 100
        console.log('üü¢ –û–±–Ω–æ–≤–∏–ª–∏ –±–ª–æ–∫–∏/—Å–µ–∫:', blocksPerSecond)
      }
      if (txDiff > 0) {
        transactionsPerSecond = Math.round((txDiff / timeDiff) * 100) / 100
        console.log('üü¢ –û–±–Ω–æ–≤–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏/—Å–µ–∫:', transactionsPerSecond)
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å
      previousTime.current = now
    }

    return {
      blocksPerSecond: Math.max(0, blocksPerSecond),
      transactionsPerSecond: Math.max(0, transactionsPerSecond),
      totalBlocks: parseInt(current.total_blocks) || 0,
      totalTransactions: parseInt(current.total_transactions) || 0,
      totalAccounts: parseInt(current.total_accounts) || 0,
      lastUpdated: new Date(current.last_updated)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏
  useEffect(() => {
    if (!statsData?.statistics || statsData.statistics.length === 0) return
    
    const currentDbStats: DatabaseStats = statsData.statistics[0]
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const newStats = calculateSpeed(currentDbStats, previousStats.current, stats)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const changedFieldsList: string[] = []
    if (newStats.blocksPerSecond !== stats.blocksPerSecond) {
      changedFieldsList.push('blocksPerSecond')
    }
    if (newStats.transactionsPerSecond !== stats.transactionsPerSecond) {
      changedFieldsList.push('transactionsPerSecond')
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setStats(newStats)
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 4 —Å–µ–∫—É–Ω–¥—ã
    const now = Date.now()
    if (changedFieldsList.length > 0 && (now - lastAnimationTime.current) >= 4000) {
      setChangedFields(changedFieldsList)
      lastAnimationTime.current = now
      
      // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setChangedFields([])
      }, 4000)
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
    previousStats.current = currentDbStats
    
  }, [statsData])
  
  if (loading && !statsData) {
    return <div className={styles.stats_container}>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</div>
  }
  
  if (error) {
    return <div className={styles.stats_container}>
      –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {error.message}
    </div>
  }
  
  return (
    <div className={styles.stats_container}>
      <StatCard 
        title="–ë–õ–û–ö–û–í –í –°–ï–ö–£–ù–î–£" 
        value={stats.blocksPerSecond} 
        subtitle="real-time —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏" 
        highlightText="real-time"
        isChanged={changedFields.includes('blocksPerSecond')}
      />
      
      <StatCard 
        title="–¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –°–ï–ö–£–ù–î–£" 
        value={stats.transactionsPerSecond} 
        subtitle="—Ä–µ–∞–ª—å–Ω—ã–π TPS" 
        highlightText="TPS"
        isChanged={changedFields.includes('transactionsPerSecond')}
      />
    </div>
  )
} 