'use client'

import { useSubscription } from '@apollo/client'
import { useEffect, useState, useRef } from 'react'
import { STATISTICS_SUBSCRIPTION, useBlockSpeed } from '@/shared/api'
import { StatCard } from '@/entities/stats'
import { DatabaseStats } from '@/entities/stats/model/types'
import styles from './styles.module.css'

export function StatsWidget() {
  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î (–¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
  const { data: statsData, loading, error } = useSubscription(STATISTICS_SUBSCRIPTION)
  
  // –ù–æ–≤—ã–π —Ö—É–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –±–ª–æ–∫–æ–≤
  const { blocksPerSecond, isChanged: isBlocksChanged, loading: blocksLoading } = useBlockSpeed()
  
  // State –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const [transactionsPerSecond, setTransactionsPerSecond] = useState(0)
  const [isTransactionsChanged, setIsTransactionsChanged] = useState(false)
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const previousStats = useRef<DatabaseStats | null>(null)
  const previousTime = useRef<number>(Date.now())
  
  // –î–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const lastAnimationTime = useRef<number>(0)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
  const calculateTransactionSpeed = (current: DatabaseStats, previous: DatabaseStats | null): number => {
    const now = Date.now()
    const timeDiff = (now - previousTime.current) / 1000 // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    if (!previous || timeDiff < 0.5) {
      return transactionsPerSecond // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    }

    const txDiff = parseInt(current.total_transactions) - parseInt(previous.total_transactions)
    
    console.log('üìä –û—Ç–ª–∞–¥–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', {
      current_tx: current.total_transactions,
      previous_tx: previous.total_transactions,
      txDiff,
      timeDiff,
      currentTPS: transactionsPerSecond
    })

    if (txDiff > 0) {
      const newTPS = Math.round((txDiff / timeDiff) * 100) / 100
      console.log('üü¢ –û–±–Ω–æ–≤–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏/—Å–µ–∫:', newTPS)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
      previousTime.current = now
      
      return Math.max(0, newTPS)
    }

    return transactionsPerSecond // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  useEffect(() => {
    if (!statsData?.statistics || statsData.statistics.length === 0) return
    
    const currentDbStats: DatabaseStats = statsData.statistics[0]
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const newTPS = calculateTransactionSpeed(currentDbStats, previousStats.current)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    if (newTPS !== transactionsPerSecond) {
      setTransactionsPerSecond(newTPS)
      
      // –ê–Ω–∏–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 4 —Å–µ–∫—É–Ω–¥—ã
      const now = Date.now()
      if ((now - lastAnimationTime.current) >= 4000) {
        setIsTransactionsChanged(true)
        lastAnimationTime.current = now
        
        setTimeout(() => {
          setIsTransactionsChanged(false)
        }, 4000)
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
    previousStats.current = currentDbStats
    
  }, [statsData, transactionsPerSecond])
  
  if ((loading || blocksLoading) && !statsData) {
    return <div className={styles.stats_container}>Statistics loading...</div>
  }
  
  if (error) {
    return <div className={styles.stats_container}>
      Error loading statistics: {error.message}
    </div>
  }
  
  return (
    <div className={styles.stats_container}>
      <StatCard 
        title="BLOCKS PER SECOND" 
        value={blocksPerSecond} 
        subtitle="network speed" 
        highlightText="speed"
        isChanged={isBlocksChanged}
      />
      
      {/* <StatCard 
        title="–¢–†–ê–ù–ó–ê–ö–¶–ò–ô –í –°–ï–ö–£–ù–î–£" 
        value={transactionsPerSecond} 
        subtitle="TPS —Å–µ—Ç–∏" 
        highlightText="TPS"
        isChanged={isTransactionsChanged}
      /> */}
    </div>
  )
} 