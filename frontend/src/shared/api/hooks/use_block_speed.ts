'use client'

import { useSubscription } from '@apollo/client'
import { useEffect, useState, useRef } from 'react'
import { LATEST_BLOCKS_SUBSCRIPTION } from '../model/stats'

interface BlockData {
  id: string
  number: string
  timestamp: string
}

export function useBlockSpeed() {
  const { data: blocksData, loading, error } = useSubscription(LATEST_BLOCKS_SUBSCRIPTION)
  const [blocksPerSecond, setBlocksPerSecond] = useState(0)
  const [isChanged, setIsChanged] = useState(false)
  
  const previousBlockId = useRef<string | null>(null)
  const speedHistory = useRef<number[]>([]) // –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–æ—Ä–æ—Å—Ç–µ–π –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
  const lastAnimationTime = useRef<number>(0)

  useEffect(() => {
    if (!blocksData?.block || blocksData.block.length < 2) return

    const blocks: BlockData[] = blocksData.block
    const latestBlock = blocks[0]
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π –±–ª–æ–∫
    if (previousBlockId.current === latestBlock.id) return
    
    // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫ (–ø–æ –Ω–æ–º–µ—Ä—É)
    const currentBlockNumber = parseInt(latestBlock.number)
    const previousBlock = blocks.find(block => 
      parseInt(block.number) === currentBlockNumber - 1
    )
    
    if (!previousBlock) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±–ª–æ–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–π
      previousBlockId.current = latestBlock.id
      return
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –†–ï–ê–õ–¨–ù–û–ï –≤—Ä–µ–º—è –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö timestamp'–æ–≤
    const currentBlockTime = new Date(latestBlock.timestamp).getTime()
    const previousBlockTime = new Date(previousBlock.timestamp).getTime()
    const realTimeDiff = (currentBlockTime - previousBlockTime) / 1000 // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    if (realTimeDiff > 0) {
      // –†–µ–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ = 1 –±–ª–æ–∫ / —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
      const realNetworkSpeed = 1 / realTimeDiff
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
      speedHistory.current.push(realNetworkSpeed)
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
      if (speedHistory.current.length > 3) {
        speedHistory.current.shift()
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å
      const averageSpeed = speedHistory.current.reduce((sum, s) => sum + s, 0) / speedHistory.current.length
      const roundedSpeed = Math.round(averageSpeed * 100) / 100
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ
      if (Math.abs(roundedSpeed - blocksPerSecond) >= 0.01) {
        setBlocksPerSecond(roundedSpeed)
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å throttling (—Ä–∞–∑ –≤ 4 —Å–µ–∫—É–Ω–¥—ã)
        const now = Date.now()
        if ((now - lastAnimationTime.current) >= 4000) {
          setIsChanged(true)
          lastAnimationTime.current = now
          
          setTimeout(() => {
            setIsChanged(false)
          }, 4000)
        }
      }
      
      // console.log('üåê –†–µ–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ Quantum Fusion:', {
      //   currentBlock: latestBlock.id,
      //   currentBlockNumber: currentBlockNumber,
      //   previousBlock: previousBlock.id,
      //   previousBlockNumber: parseInt(previousBlock.number),
      //   realTimeDiff: realTimeDiff.toFixed(3) + 's',
      //   networkSpeed: realNetworkSpeed.toFixed(3),
      //   averageSpeed: roundedSpeed,
      //   currentTimestamp: latestBlock.timestamp,
      //   previousTimestamp: previousBlock.timestamp
      // })
      // console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –±–ª–æ–∫–æ–≤:', blocks.slice(0, 5).map(b => ({ id: b.id, number: b.number, timestamp: b.timestamp })))
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
    previousBlockId.current = latestBlock.id

  }, [blocksData, blocksPerSecond])

  return {
    blocksPerSecond,
    isChanged,
    loading,
    error
  }
} 