'use client'

import { useSubscription } from '@apollo/client'
import { useEffect, useState, useRef } from 'react'
import { LATEST_BLOCKS_SUBSCRIPTION } from '../model/stats'

interface BlockData {
  id: string
  number: string
  timestamp: string
}

export function useBlockSpeed() {
  const { data: blocksData, loading, error } = useSubscription(LATEST_BLOCKS_SUBSCRIPTION)
  const [blocksPerSecond, setBlocksPerSecond] = useState(0)
  const [isChanged, setIsChanged] = useState(false)
  
  const previousBlockTime = useRef<number | null>(null)
  const speedHistory = useRef<number[]>([]) // –•—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–æ—Ä–æ—Å—Ç–µ–π –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
  const lastAnimationTime = useRef<number>(0)

  useEffect(() => {
    if (!blocksData?.block || blocksData.block.length === 0) return

    const blocks: BlockData[] = blocksData.block
    const latestBlock = blocks[0]
    const currentBlockTime = new Date(latestBlock.timestamp).getTime()

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è
    if (previousBlockTime.current === null) {
      previousBlockTime.current = currentBlockTime
      return
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
    const timeDiff = (currentBlockTime - previousBlockTime.current) / 1000 // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    if (timeDiff > 0) {
      // –°–∫–æ—Ä–æ—Å—Ç—å = 1 –±–ª–æ–∫ / –≤—Ä–µ–º—è –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
      const speed = 1 / timeDiff
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
      speedHistory.current.push(speed)
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π
      if (speedHistory.current.length > 5) {
        speedHistory.current.shift()
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å
      const averageSpeed = speedHistory.current.reduce((sum, s) => sum + s, 0) / speedHistory.current.length
      const roundedSpeed = Math.round(averageSpeed * 100) / 100
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ
      if (Math.abs(roundedSpeed - blocksPerSecond) >= 0.01) {
        setBlocksPerSecond(roundedSpeed)
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å throttling (—Ä–∞–∑ –≤ 4 —Å–µ–∫—É–Ω–¥—ã)
        const now = Date.now()
        if ((now - lastAnimationTime.current) >= 4000) {
          setIsChanged(true)
          lastAnimationTime.current = now
          
          setTimeout(() => {
            setIsChanged(false)
          }, 4000)
        }
      }
      
      console.log('üîÑ –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –±–ª–æ–∫–æ–≤:', {
        timeDiff: timeDiff.toFixed(2),
        speed: speed.toFixed(2),
        averageSpeed: roundedSpeed,
        blockNumber: latestBlock.number
      })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
    previousBlockTime.current = currentBlockTime

  }, [blocksData, blocksPerSecond])

  return {
    blocksPerSecond,
    isChanged,
    loading,
    error
  }
} 