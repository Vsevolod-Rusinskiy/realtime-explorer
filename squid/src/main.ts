import {TypeormDatabase, Store} from '@subsquid/typeorm-store'
import {In} from 'typeorm'
import * as ss58 from '@subsquid/ss58'
import assert from 'assert'

import {createProcessor, ProcessorContext} from './processor'
import {Account, Block, Transaction, Event, Statistics} from './model'
import {events} from './types'
import {cleanupOldBlocks} from './db/cleanup'

async function main() {
  const processor = await createProcessor()
  processor.run(new TypeormDatabase({supportHotBlocks: true}), async (ctx) => {
    // ‚è±Ô∏è –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞
    const batchStartTime = Date.now()
    
    const accounts = new Map<string, Account>()
    const blocks = new Map<string, Block>()
    const transactions = new Map<string, Transaction>()
    const eventsMap = new Map<string, Event>()
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let totalTransfers = 0
    let totalEvents = 0
    let totalWithdraws = 0
    let totalExtrinsics = 0
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    let stats = await ctx.store.findOne(Statistics, { where: { id: '1' } })
    
    if (!stats) {
      // –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      stats = new Statistics({
        id: '1',
        totalBlocks: 0n,
        totalExtrinsics: 0n,
        totalEvents: 0n,
        totalTransfers: 0n,
        totalWithdraws: 0n,
        totalTransactions: 0n,
        totalAccounts: 0n,
        lastUpdated: new Date()
      })
    }
    
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ –∏–∑ ${ctx.blocks.length} –±–ª–æ–∫–æ–≤`)
    
    for (const block of ctx.blocks) {
      const blockProcessStartTime = Date.now()
      const blockTimestamp = new Date(block.header.timestamp || 0)
      const blockAge = Date.now() - blockTimestamp.getTime()
      
      console.log(`üì¶ –ë–ª–æ–∫ #${block.header.height}`)
      console.log(`   Hash: ${block.header.hash}`)
      console.log(`   –í—Ä–µ–º—è –±–ª–æ–∫–∞: ${blockTimestamp.toISOString()}`)
      console.log(`   –í–æ–∑—Ä–∞—Å—Ç –±–ª–æ–∫–∞: ${blockAge}ms`)
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–ª–æ–∫–∞
      const blockEntity = new Block({
        id: block.header.hash,
        number: BigInt(block.header.height),
        hash: block.header.hash,
        timestamp: new Date(block.header.timestamp || 0),
        validator: block.header.validator || '',
        status: 'finalized',
        size: 0 // –†–∞–∑–º–µ—Ä –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
      })
      
      blocks.set(block.header.hash, blockEntity)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
      if (block.header.validator && !accounts.has(block.header.validator)) {
        accounts.set(block.header.validator, new Account({
          id: block.header.validator,
          balance: 0n,
          updatedAt: new Date(block.header.timestamp || 0)
        }))
      }
      
      for (const extrinsic of block.extrinsics) {
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–∑–∏–Ω—Ç—Ä–∏–∫—Å–∏–∫–∏ –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (extrinsic.success) {
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
            const txId = `${block.header.hash}-extrinsic-${extrinsic.index}`
            
            const tx = new Transaction({
              id: txId,
              block: blockEntity,
              timestamp: new Date(block.header.timestamp || 0),
              from: undefined, // –ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–¥–µ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, —É–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ–ª–µ
              to: undefined,
              amount: 0n,
              fee: extrinsic.fee ? BigInt(extrinsic.fee.toString()) : 0n,
              status: 'success',
              type: 'extrinsic',
              data: JSON.stringify({
                hash: extrinsic.hash,
                index: extrinsic.index
              })
            })
            
            transactions.set(txId, tx)
            totalExtrinsics++
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–∫–∑–∏–Ω—Ç—Ä–∏–∫—Å–∏–∫–∞:', e)
          }
        }
      }
      
      for (const event of block.events) {
        console.log(`  –°–æ–±—ã—Ç–∏–µ: ${event.name}`)
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Balances.Transfer (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
        if (event.name === 'Balances.Transfer') {
          try {
            const args = event.args
            const from = args.from?.toString() || ''
            const to = args.to?.toString() || ''
            const amount = args.amount ? BigInt(args.amount.toString()) : 0n
            console.log(`    –ü–µ—Ä–µ–≤–æ–¥: ${from} -> ${to}, —Å—É–º–º–∞: ${amount}`)
            
            // –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
            if (from && !accounts.has(from)) {
              accounts.set(from, new Account({id: from, balance: 0n, updatedAt: new Date()}))
            }
            if (to && !accounts.has(to)) {
              accounts.set(to, new Account({id: to, balance: 0n, updatedAt: new Date()}))
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const txId = `${block.header.hash}-transfer-${totalTransfers}`
            const tx = new Transaction({
              id: txId,
              block: blockEntity,
              timestamp: new Date(block.header.timestamp || 0),
              from: accounts.get(from),
              to: accounts.get(to),
              amount: amount,
              fee: 0n, // –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∑–∂–µ
              status: 'success',
              type: 'transfer',
              data: JSON.stringify(args)
            })
            
            transactions.set(txId, tx)
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            const eventId = `${block.header.hash}-event-${event.index}`
            const eventEntity = new Event({
              id: eventId,
              block: blockEntity,
              transaction: tx,
              section: 'Balances',
              method: 'Transfer',
              data: JSON.stringify(args)
            })
            
            eventsMap.set(eventId, eventEntity)
            
            totalTransfers++
          } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Balances.Transfer:', e)
          }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π Balances (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
        else if (event.name.startsWith('Balances.') && event.name !== 'Balances.Transfer') {
          console.log(`    –ë–∞–ª–∞–Ω—Å–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event.name}, args:`, event.args)
          
          // –ï—Å–ª–∏ —ç—Ç–æ Balances.Withdraw, –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
          if (event.name === 'Balances.Withdraw') {
            try {
              const args = event.args
              const who = args.who?.toString() || ''
              const amount = args.amount ? BigInt(args.amount.toString()) : 0n
              
              // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
              if (who && !accounts.has(who)) {
                console.log(`    –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç: ${who} –∏–∑ —Å–æ–±—ã—Ç–∏—è Withdraw`)
                accounts.set(who, new Account({
                  id: who,
                  balance: 0n, // –ë–∞–ª–∞–Ω—Å –Ω–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                  updatedAt: new Date(block.header.timestamp || 0)
                }))
              }
              
              totalWithdraws++
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Balances.Withdraw:', e)
            }
          }
          
          // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
          const eventId = `${block.header.hash}-event-${event.index}`
          const eventEntity = new Event({
            id: eventId,
            block: blockEntity,
            section: 'Balances',
            method: event.name.split('.')[1],
            data: JSON.stringify(event.args)
          })
          
          eventsMap.set(eventId, eventEntity)
        }
        // NEW: –û–±—Ä–∞–±–æ—Ç–∫–∞ System.ExtrinsicSuccess –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π
        else {
          const [section, method] = event.name.split('.')
          
          // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —ç–∫–∑–∏–Ω—Ç—Ä–∏–∫—Å–∏–∫–∞
          let transaction = undefined
          if (event.extrinsic) {
            const txId = `${block.header.hash}-extrinsic-${event.extrinsic.index}`
            transaction = transactions.get(txId)
          }
          
          // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
          const eventId = `${block.header.hash}-event-${event.index}`
          const eventEntity = new Event({
            id: eventId,
            block: blockEntity,
            transaction: transaction,
            section: section,
            method: method,
            data: JSON.stringify(event.args || {})
          })
          
          eventsMap.set(eventId, eventEntity)
          totalEvents++
        }
      }
      
      const blockProcessTime = Date.now() - blockProcessStartTime
      console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–∞: ${blockProcessTime}ms`)
    }
    
    // ‚è±Ô∏è –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    const dbWriteStartTime = Date.now()
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫–∏
    if (blocks.size > 0) {
      const blockSaveStart = Date.now()
      await ctx.store.upsert([...blocks.values()])
      const blockSaveTime = Date.now() - blockSaveStart
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–ª–æ–∫–æ–≤: ${blocks.size} –∑–∞ ${blockSaveTime}ms`)
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (transactions.size > 0) {
      const txSaveStart = Date.now()
      await ctx.store.upsert([...transactions.values()])
      const txSaveTime = Date.now() - txSaveStart
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.size} –∑–∞ ${txSaveTime}ms`)
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏—è
    if (eventsMap.size > 0) {
      const eventSaveStart = Date.now()
      await ctx.store.upsert([...eventsMap.values()])
      const eventSaveTime = Date.now() - eventSaveStart
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${eventsMap.size} –∑–∞ ${eventSaveTime}ms`)
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    if (accounts.size > 0) {
      const accountSaveStart = Date.now()
      await ctx.store.upsert([...accounts.values()])
      const accountSaveTime = Date.now() - accountSaveStart
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${accounts.size} –∑–∞ ${accountSaveTime}ms`)
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.totalBlocks = BigInt(await ctx.store.count(Block))
    stats.totalTransactions = (stats.totalTransactions || 0n) + BigInt(transactions.size)
    stats.totalExtrinsics = (stats.totalExtrinsics || 0n) + BigInt(totalExtrinsics)
    stats.totalEvents = (stats.totalEvents || 0n) + BigInt(totalEvents)
    stats.totalTransfers = (stats.totalTransfers || 0n) + BigInt(totalTransfers)
    stats.totalWithdraws = (stats.totalWithdraws || 0n) + BigInt(totalWithdraws)
    stats.totalAccounts = BigInt(await ctx.store.count(Account))
    stats.lastUpdated = new Date()
    
    await ctx.store.upsert(stats)
    
    const dbWriteTime = Date.now() - dbWriteStartTime
    const totalBatchTime = Date.now() - batchStartTime
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç—á–∞:`)
    console.log(`   - –ë–ª–æ–∫–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${ctx.blocks.length}`)
    console.log(`   - –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${transactions.size}`)
    console.log(`   - –°–æ–±—ã—Ç–∏–π: ${eventsMap.size}`)
    console.log(`   - –ê–∫–∫–∞—É–Ω—Ç–æ–≤: ${accounts.size}`)
    console.log(`   ‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î: ${dbWriteTime}ms`)
    console.log(`   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –±–∞—Ç—á–∞: ${totalBatchTime}ms`)
    console.log(`   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: ${(ctx.blocks.length / (totalBatchTime / 1000)).toFixed(2)} –±–ª–æ–∫–æ–≤/—Å–µ–∫`)
    console.log(`---`)
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±–ª–æ–∫–∏
    try {
      await cleanupOldBlocks(ctx)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±–ª–æ–∫–æ–≤:', error)
    }
  })
}

main().catch(console.error)
